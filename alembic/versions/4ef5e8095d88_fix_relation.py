"""fix relation

Revision ID: 4ef5e8095d88
Revises: 791e3ab7e02c
Create Date: 2025-07-22 21:50:10.645503

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4ef5e8095d88"
down_revision: str | Sequence[str] | None = "791e3ab7e02c"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("settings_user_id_key"), "settings", type_="unique")
    op.drop_constraint(op.f("settings_user_id_fkey"), "settings", type_="foreignkey")
    op.drop_column("settings", "user_id")
    op.add_column("users", sa.Column("setting_id", sa.Integer(), nullable=True))
    op.create_unique_constraint(None, "users", ["setting_id"])
    op.create_foreign_key(None, "users", "settings", ["setting_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_column("users", "setting_id")
    op.add_column("settings", sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f("settings_user_id_fkey"), "settings", "users", ["user_id"], ["id"])
    op.create_unique_constraint(
        op.f("settings_user_id_key"), "settings", ["user_id"], postgresql_nulls_not_distinct=False
    )
    # ### end Alembic commands ###
